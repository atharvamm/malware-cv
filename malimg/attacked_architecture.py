
import numpy as np
import matplotlib.pyplot as plt


with open('attacked_arch_output.txt', 'r') as f:
    # Initialize the arrays
    val_losses = []
    val_corrects = []
    macro_precisions = []
    macro_recalls = []
    # Start processing each block of data
    in_block = False
    for line in f:
        if line.startswith('Validation Loss'):
            # Start of a new block
            in_block = True
            val_loss, val_correct = line.split(':')[1].split()
            val_losses.append(float(val_loss))
            val_corrects.append(float(val_correct))
            continue
        if in_block and line.startswith('Macro-average Precision'):
            # End of the block
            in_block = False
            macro_precision = float(line.split(':')[1])
            macro_recall = float(next(f).split(':')[1])
            macro_precisions.append(macro_precision)
            macro_recalls.append(macro_recall)
    


# Convert the metric data to numpy arrays
val_losses = np.array(val_losses)
val_correct = np.array(val_correct)
precisions = np.array(precisions)
recalls = np.array(recalls)
f1_scores = np.array(f1_scores)
macro_avg_precisions = np.array(macro_avg_precisions)

# Plot the data for each metric and save to separate files
plt.plot(val_losses)
plt.title('Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Value')
plt.savefig('val_loss_attacked.png')
plt.clf()

plt.plot(val_correct)
plt.title('Validation Correct')
plt.xlabel('Epoch')
plt.ylabel('Value')
plt.savefig('val_correct_attacked.png')
plt.clf()

plt.plot(precisions)
plt.title('Precisions')
plt.xlabel('File')
plt.ylabel('Value')
plt.savefig('precisions_attacked.png')
plt.clf()

plt.plot(recalls)
plt.title('Recalls')
plt.xlabel('Epoch')
plt.ylabel('Value')
plt.savefig('recalls_attacked.png')
plt.clf()

plt.plot(f1_scores)
plt.title('F1-scores')
plt.xlabel('Epoch')
plt.ylabel('Value')
plt.savefig('f1_scores.png')
plt.clf()

plt.plot(macro_avg_precisions)
plt.title('Macro-average Precisions')
plt.xlabel('Epoch')
plt.ylabel('Value')
plt.savefig('macro_avg_precisions.png')
plt.clf()
