import numpy as np
import torch
import matplotlib.pyplot as plt


# Load data from txt file
with open('original_architecture_output.txt', 'r') as f: # or .txt squeezed_output
    data = f.read().split('\n')

# Initialize arrays to store data
losses = []
val_losses = []
val_accs = []
macro_precisions = []
macro_recalls = []
tensor_arrays = []

# Loop through each line of the data and extract relevant values
for line in data:
    if line.startswith('Epoch'):
        # Extract loss, val loss, val acc, macro-avg precision, and macro-avg recall
        loss = float(line.split('Loss: ')[1].split(',')[0])
        val_loss = float(line.split('Val Loss: ')[1].split(',')[0])
        val_acc = float(line.split('Val Acc: ')[1].split(',')[0])
        macro_precision = float(line.split('Macro-average Precision: ')[1].split(',')[0])
        macro_recall = float(line.split('Macro-average Recall: ')[1])
        # Append values to respective arrays
        losses.append(loss)
        val_losses.append(val_loss)
        val_accs.append(val_acc)
        macro_precisions.append(macro_precision)
        macro_recalls.append(macro_recall)
    # elif line.startswith('tensor'):
    #     # Extract tensor values
    #     tensor_values = [float(x) for x in line.split('(')[1].split(')')[0].split(', ') if x]
    #     print(tensor_values)
    #     tensor_array = torch.tensor(tensor_values)
    #     print(tensor_array)
    #     tensor_arrays.append(tensor_array)

# Convert lists to numpy arrays
losses = np.array(losses)
val_losses = np.array(val_losses)
val_accs = np.array(val_accs)
macro_precisions = np.array(macro_precisions)
macro_recalls = np.array(macro_recalls)

# # Plot the data
# plt.figure(figsize=(10, 5))

# plt.subplot(1, 2, 1)
# plt.plot(losses, label='Training')
# plt.plot(val_losses, label='Validation')
# plt.legend()
# plt.title('Losses')

# plt.subplot(1, 2, 2)
# plt.plot(val_accs, label='Validation')
# plt.legend()
# plt.title('Validation Accuracy')

# plt.show()

# Create a figure with 5 subplots arranged in a vertical column
import matplotlib.pyplot as plt

# Plot the data for each subplot and save to a separate file
fig, axs = plt.subplots(figsize=(10, 10))

axs.plot(losses)
axs.set_title('Training Loss')
axs.set_xlabel('Epoch')
axs.set_ylabel('Loss')
fig.savefig('training_loss.png')

fig, axs = plt.subplots(figsize=(10, 10))
axs.plot(val_losses)
axs.set_title('Validation Loss')
axs.set_xlabel('Epoch')
axs.set_ylabel('Loss')
fig.savefig('validation_loss.png')

fig, axs = plt.subplots(figsize=(10, 10))
axs.plot(val_accs)
axs.set_title('Validation Accuracy')
axs.set_xlabel('Epoch')
axs.set_ylabel('Accuracy')
fig.savefig('validation_accuracy.png')

fig, axs = plt.subplots(figsize=(10, 10))
axs.plot(macro_precisions)
axs.set_title('Macro-average Precision')
axs.set_xlabel('Epoch')
axs.set_ylabel('Precision')
fig.savefig('macro_average_precision.png')

fig, axs = plt.subplots(figsize=(10, 10))
axs.plot(macro_recalls)
axs.set_title('Macro-average Recall')
axs.set_xlabel('Epoch')
axs.set_ylabel('Recall')
fig.savefig('macro_average_recall.png')
